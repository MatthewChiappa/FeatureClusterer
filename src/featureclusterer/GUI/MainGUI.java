/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package featureclusterer.GUI;

import featureclusterer.Algorithms.Algorithm;
import featureclusterer.Algorithms.BIRCH.BirchExec;
import featureclusterer.Algorithms.BIRCH.DistThreshChoose;
import featureclusterer.Algorithms.FCM.FCMChoose;
import featureclusterer.Algorithms.Matlab.MatlabAlg;
import featureclusterer.Algorithms.Matlab.MatlabSammon;
import featureclusterer.FeatureSelection.Distances;
import featureclusterer.FeatureSelection.Dropper;
import featureclusterer.FeatureSelection.Memberships;
import featureclusterer.File.InputReader;
import featureclusterer.File.OutputWriter;
import featureclusterer.File.OutputWriter2;
import featureclusterer.File.OutputWriter3;
import featureclusterer.Plot.Cluster;
import featureclusterer.Plot.DataPoint;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import matlabcontrol.MatlabConnectionException;
import matlabcontrol.MatlabInvocationException;
import matlabcontrol.MatlabProxy;
import matlabcontrol.MatlabProxyFactory;
import matlabcontrol.MatlabProxyFactoryOptions;

/**
 *
 * @author MattChiappa
 */
public class MainGUI extends javax.swing.JFrame {

    File loadedDataset = null;
    private boolean displayed;
    boolean fuzzy;
    ArrayList<Cluster> clusters = null;
    private int algNum = 0;
    boolean addClusts2 = false;
    DispMatLab matlab;
    MatlabProxy proxy = null;
    Algorithm alg = null;
    MatlabSammon sammon;

    // parameters for clustering
    private double birchDistThresh;
    private int initialK;
    HashMap<String, Double> params = new HashMap<>();
    private int didSammon = 0;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        try {
            initComponents();
            boolean hide = new DispMatLab().openDialog();
            MatlabProxyFactoryOptions options = new MatlabProxyFactoryOptions.Builder()
                    .setUsePreviouslyControlledSession(true)
                    .setHidden(hide)
                    .setMatlabLocation(null).build();
            MatlabProxyFactory factory = new MatlabProxyFactory(options);
            proxy = factory.getProxy();

            this.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    if (proxy != null) {
                        try {
                            proxy.eval("close all");
                            proxy.eval("clear all");
                        } catch (MatlabInvocationException ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });

            params.put("k", Double.valueOf(initialK));
            params.put("m", new Double(2));
            params.put("e", 0.000001);
            params.put("val", new Double(1));
        } catch (MatlabConnectionException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        browse = new javax.swing.JButton();
        text = new javax.swing.JTextField();
        display = new javax.swing.JButton();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Feature Selection Clusterer");

        jLabel2.setText("Import Data File:");

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        text.setEditable(false);

        display.setText("Choose and Display");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        save.setText("Save All Output");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browse)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(display)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(browse)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(display)
                    .addComponent(save))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // open a file dialog so the user can import a txt data file
        JFileChooser fc = new JFileChooser(new File("/Users/MattChiappa/Documents/Research/Datasets"));
        fc.setAcceptAllFileFilterUsed(false);

        // filter only txt documents
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Document (.txt)", "txt", "text");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(MainGUI.this);

        // if a user selected a file, save the jfile
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            loadedDataset = fc.getSelectedFile();
            text.setText(loadedDataset.getName());
        }
    }//GEN-LAST:event_browseActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // if the user loaded a file then read file and display, if not display error
        if (loadedDataset != null) {
            displayed = true;

            // if the user wants to add a cluster file
            File addClusts = addClusts();
            InputReader input = new InputReader(loadedDataset, addClusts);

            // asks and excecutes algorthim user chooses and if they would like 
            // a Sammon or Fuzzy Sammon projection and add title for graph
            // Sammon projections are added to data points
            alg = openAlgorithm(input.getData());
            clusters = alg.getClusters();
            sammon = runSammon(input.getData());
            clusters = sammon.addSamProj(clusters);
            addSamTitle();

            // displays the graph in matlab then calculates memberships
            // and adds title to graph
            matlab = new DispMatLab(alg.getClusters(), proxy);
            addClusteringTitle();
            
            // Sammon means are added to cluster means
            clusters = sammon.addSamMeans(clusters);
        } else {
            JOptionPane.showMessageDialog(MainGUI.this,
                    "Please choose an input file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_displayActionPerformed

    @SuppressWarnings("null")
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // if the user has displayed the data then begin save process
        if (displayed == true) {
            FileWriter fw = null;
            FileWriter fw2 = null;
            FileWriter fw3 = null;
            FileWriter fw4 = null;

            File outFile = null;
            File outFile2 = null;
            File outFile3 = null;
            File outFile4 = null;

            ArrayList<ArrayList> valValues = new ArrayList<>();

            try {
                // ask user where they would like to save, then open file to write
                // second file is created with the name (FILE NAME)_2.csv
                outFile = openFile();
                outFile2 = new File(outFile.getParent() + "/"
                        + outFile.getName().substring(0, outFile.getName().length() - 4) + "_2.csv");
                outFile3 = new File(outFile.getParent() + "/"
                        + outFile.getName().substring(0, outFile.getName().length() - 4) + "_Validity1.csv");
                outFile4 = new File(outFile.getParent() + "/"
                        + outFile.getName().substring(0, outFile.getName().length() - 4) + "_Validity2.csv");
                fw = new FileWriter(outFile.getAbsoluteFile());
                fw2 = new FileWriter(outFile2.getAbsolutePath());
                fw3 = new FileWriter(outFile3.getAbsolutePath());
                fw4 = new FileWriter(outFile4.getAbsolutePath());

                OutputWriter out;
                OutputWriter2 out2;
                OutputWriter3 out3;
                OutputWriter3 out4;
                Memberships mem;
                Distances dist;

                // if the user selected to not drop each feature for feature selection,
                // start writing to file
                if (!openDialog()) {
                    out = new OutputWriter(clusters, fw, fuzzy, addClusts2);
                    out2 = new OutputWriter2(clusters, fw2, fuzzy, addClusts2);
                    out3 = new OutputWriter3(alg.returnValidity(), fw3);

                    if (fuzzy) {
                        fw4.append("Clusters: 2\n");
                        for (int i = 2; i < 9; i++) {
                            // change k then rerun algorithm on data
                            alg = openAlgorithm(createNewInput(clusters), algNum, i);

                            // get validity
                            valValues.add(alg.returnValidity());

                            // write output to file
                            out4 = new OutputWriter3(alg.returnValidity(), fw4);
                            if (i < 8) {
                                fw4.append("\n\nClusters: " + (i + 1) + "\n");
                            }
                        }

                        // display validity measures in MatLab
                        matlab.startValidity(valValues);
                    }

                    fw.append("\n\n\n");
                    fw2.append("\n\n\n");
                    fw3.append("\n\n\n");
                } else {
                    // get the dimensions of the data
                    int dim = clusters.get(0).getData().get(0).getPoints().length;

                    // get validity measures
                    valValues = new ArrayList<>();
                    valValues.add(alg.returnValidity());

                    // write each clustering with different features dropped 
                    out = new OutputWriter(clusters, fw, fuzzy, addClusts2);
                    out2 = new OutputWriter2(clusters, fw2, fuzzy, addClusts2);
                    out3 = new OutputWriter3(alg.returnValidity(), fw3);

                    fw.append("\n\nFeature Dropped: 1\n");
                    fw2.append("\n\nFeature Dropped: 1\n");
                    fw3.append("\n\nFeature Dropped: 1\n");

                    for (int i = 0; i < dim; i++) {
                        // drop feature then rerun algorithm on data
                        ArrayList<Cluster> newClusters = new Dropper(clusters, i).getClusters();
                        alg = openAlgorithm(createNewInput(newClusters), algNum);
                        newClusters = alg.getClusters();

                        // get validity
                        valValues.add(alg.returnValidity());

                        // write output to file
                        out = new OutputWriter(newClusters, fw, fuzzy, addClusts2, true);
                        out2 = new OutputWriter2(newClusters, fw2, fuzzy, addClusts2, true);
                        out3 = new OutputWriter3(alg.returnValidity(), fw3);
                        if (i < dim - 1) {
                            fw.append("\n\nFeature Dropped: " + (i + 2) + "\n");
                            fw2.append("\n\nFeature Dropped: " + (i + 2) + "\n");
                            fw3.append("\n\nFeature Dropped: " + (i + 2) + "\n");
                        }
                    }

                    valValues = new ArrayList<>();

                    if (fuzzy) {
                        fw4.append("Clusters: 2\n");
                        for (int i = 2; i < 9; i++) {
                            // change k then rerun algorithm on data
                            alg = openAlgorithm(createNewInput(clusters), algNum, i);

                            // get validity
                            valValues.add(alg.returnValidity());

                            // write output to file
                            out4 = new OutputWriter3(alg.returnValidity(), fw4);
                            if (i < 8) {
                                fw4.append("\n\nClusters: " + (i + 1) + "\n");
                            }
                        }

                        // display validity measures in MatLab
                        matlab.startValidity(valValues);
                    }
                }

            } catch (IOException | MatlabInvocationException | MatlabConnectionException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (fw != null) {
                        fw.close();
                    }
                    if (fw2 != null) {
                        fw2.close();
                    }
                    if (fw3 != null) {
                        fw3.close();
                    }
                    if (fw4 != null) {
                        fw4.close();
                    }
                    // open the files that has been written to
                    Desktop desktop = Desktop.getDesktop();
                    if (outFile4.exists()) {
                        desktop.open(outFile3);
                    }
                    if (outFile3.exists()) {
                        desktop.open(outFile3);
                    }
                    if (outFile2.exists()) {
                        desktop.open(outFile2);
                    }
                    if (outFile.exists()) {
                        desktop.open(outFile);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(MainGUI.this,
                    "Please choose an input file or display output first.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("Convert2Lambda")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton save;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables

    // asks the user for which algoroithm they want to use then
    // returns that Algorithm object with new clusters
    private Algorithm openAlgorithm(ArrayList<DataPoint> input) {
        AlgorithmChooser algC = new AlgorithmChooser(MainGUI.this, true);
        @SuppressWarnings("UnusedAssignment")
        FCMChoose fcm = null;

        // flag if algorithm is fuzzy or crisp
        fuzzy = (algC.getSelection() != 0);
        algNum = algC.getSelection();

        switch (algC.getSelection()) {
            case 0:
                // executes birch algorithm
                DistThreshChoose dis = new DistThreshChoose(MainGUI.this, true);
                birchDistThresh = dis.getDistThresh();
                alg = new BirchExec(input, birchDistThresh);
                break;
            case 1:
                fcm = new FCMChoose(MainGUI.this, true);
                initialK = fcm.getK();
                params.replace("k", Double.valueOf(initialK));
                alg = new MatlabAlg(input, params, 1, proxy);
                break;
            case 2:
                fcm = new FCMChoose(MainGUI.this, true);
                initialK = fcm.getK();
                params.replace("k", Double.valueOf(initialK));
                alg = new MatlabAlg(input, params, 2, proxy);
                break;
        }

        return alg;
    }

    // asks the user for which mapping they want to use
    private MatlabSammon runSammon(ArrayList<DataPoint> pts) {
        SammonChooser sam = new SammonChooser(MainGUI.this, true);
        didSammon = sam.getSelection();
        MatlabSammon s = new MatlabSammon(proxy, sam.getSelection(), pts);
        return s;
    }

    // returns that Algorithm object with new clusters (used for the dropping of
    // features)
    private Algorithm openAlgorithm(ArrayList<DataPoint> input, int num) throws IOException {
        switch (num) {
            case 0:
                // executes birch algorithm
                alg = new BirchExec(input, birchDistThresh);
                break;
            case 1:
                params.replace("k", Double.valueOf(initialK));
                alg = new MatlabAlg(input, params, 1, proxy);
                break;
            case 2:
                params.replace("k", Double.valueOf(initialK));
                alg = new MatlabAlg(input, params, 2, proxy);
                break;
        }

        return alg;
    }

    // returns that Algorithm object with new clusters (used for the dropping of
    // features)
    private Algorithm openAlgorithm(ArrayList<DataPoint> input, int num, int k) throws IOException {
        params.replace("k", Double.valueOf(k));

        switch (num) {
            case 0:
                // executes birch algorithm
                alg = new BirchExec(input, birchDistThresh);
                break;
            case 1:
                alg = new MatlabAlg(input, params, 1, proxy);
                break;
            case 2:
                alg = new MatlabAlg(input, params, 2, proxy);
                break;
        }

        return alg;
    }

    // opens a dialog to chose path to save to
    private File openFile() throws IOException {
        FileDialog fDialog = new FileDialog(this, "Save", FileDialog.SAVE);
        fDialog.setFile("*.csv");
        fDialog.setVisible(true);
        String path = fDialog.getDirectory() + fDialog.getFile();
        File outFile = new File(path);
        outFile.createNewFile();
        if (!outFile.exists()) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "Please choose a path for the output.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        return outFile;
    }

    // used for feature selection
    private boolean openDialog() {
        JOptionPane dia = new JOptionPane(
                "Would you like to drop features?");
        Object[] option = new String[]{"No", "Yes"};
        dia.setOptions(option);
        JDialog dialog = dia.createDialog(null, "Drop Features");
        dialog.setVisible(true);
        Object obj = dia.getValue();

        return option[1].equals(obj);
    }

    // gets an array list of clusters and concatinates the datapoints
    private ArrayList<DataPoint> createNewInput(ArrayList<Cluster> newClusters) {
        ArrayList<DataPoint> newInp = new ArrayList<>();

        newClusters.stream().forEach((clust) -> {
            clust.getData().stream().forEach((pt) -> {
                newInp.add(pt);
            });
        });
        return newInp;
    }

    // returns a cluster file if user picks one
    private File addClusts() {
        if (openDialog2()) {
            addClusts2 = true;
            File newF = getFile();
            return newF;
        } else {
            return null;
        }
    }

    // the user has the option to input the original clusters to the file
    private boolean openDialog2() {
        JOptionPane dia = new JOptionPane(
                "Would you like to load a original cluster file?");
        Object[] option = new String[]{"No", "Yes"};
        dia.setOptions(option);
        JDialog dialog = dia.createDialog(null, "Cluster File");
        dialog.setVisible(true);
        Object obj = dia.getValue();

        return option[1].equals(obj);
    }

    // get the file that contains the original clusters
    private File getFile() {
        final JFileChooser fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Document (.txt)", "txt", "text");
        fc.setFileFilter(filter);

        int returnVal = fc.showOpenDialog(new JFrame());

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile();
        }

        return null;
    }

    private void addSamTitle() {
        try {
            String name = loadedDataset.getName().substring(0, loadedDataset.getName().length()-4);
            if (didSammon == 1) {
                proxy.eval("title('" + name + " - Sammon Mapping')");
            } else if (didSammon == 2) {
                proxy.eval("title('" + name + " - Fuzzy Sammon Mapping')");
            }
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addClusteringTitle() {
        try {
            String name = loadedDataset.getName().substring(0, loadedDataset.getName().length()-4);
            proxy.eval("title('" + name + " - Clustering')");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
